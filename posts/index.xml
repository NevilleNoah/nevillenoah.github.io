<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - Neville Noah | Blog</title>
        <link>https://nevillenoah.github.io/posts/</link>
        <description>所有文章 | Neville Noah | Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 12 Aug 2020 17:32:58 &#43;0800</lastBuildDate><atom:link href="https://nevillenoah.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>设计模式：原型模式</title>
    <link>https://nevillenoah.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Wed, 12 Aug 2020 17:32:58 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://nevillenoah.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[释义 原型模式，暂存一个原型，当需要创建该类的对象的时候（尤其是需要大量该类对象的时候），直接从这个原型复制一个对象出来而不是从头开始创建。 原]]></description>
</item><item>
    <title>设计模式：单例模式</title>
    <link>https://nevillenoah.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Wed, 12 Aug 2020 16:32:58 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://nevillenoah.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[释义 单例模式，对象仅保持一个实例，并且这个实例由自己创建。通常这个实例是静态变量，创建实例的方法为静态方法。 单例模式5e8177620869]]></description>
</item><item>
    <title>设计模式：建造者模式</title>
    <link>https://nevillenoah.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Wed, 12 Aug 2020 15:32:58 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://nevillenoah.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[建造者模式 建造者模式，如果一个对象很复杂，我们可以将其分割为各个子类，逐步构造子类，最后完成这个对象的构造，这个过程就像建筑师在建造房子时逐]]></description>
</item><item>
    <title>设计模式：抽象工厂模式</title>
    <link>https://nevillenoah.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Wed, 12 Aug 2020 14:32:58 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://nevillenoah.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[释义 抽象工厂模式，在工厂模式的基础上增加了一个能够生产工厂的超级工厂SuperFactory。抽象工厂AbstractFactory可以转变]]></description>
</item><item>
    <title>设计模式：工厂模式</title>
    <link>https://nevillenoah.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Wed, 12 Aug 2020 13:32:58 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://nevillenoah.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[释义 工厂模式，一个工厂可以生产一类产品，客户在订单中告诉工厂产品的具体要求，工厂为客户生产相应的产品。 工厂模式af6f3cd101a5ff3]]></description>
</item><item>
    <title>Jetpack：Paging分页库之进度状态</title>
    <link>https://nevillenoah.github.io/jetpackpaging%E5%88%86%E9%A1%B5%E5%BA%93%E4%B9%8B%E8%BF%9B%E5%BA%A6%E7%8A%B6%E6%80%81/</link>
    <pubDate>Mon, 10 Aug 2020 19:05:41 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://nevillenoah.github.io/jetpackpaging%E5%88%86%E9%A1%B5%E5%BA%93%E4%B9%8B%E8%BF%9B%E5%BA%A6%E7%8A%B6%E6%80%81/</guid>
    <description><![CDATA[引言 我们在数据加载的过程中需要用到进度组件（例如加载圈、进度条）来显示加载状态。Paging为此提供了一个非常优秀的适配器LoadState]]></description>
</item><item>
    <title>Jetpack：Paging分页库与网络加载</title>
    <link>https://nevillenoah.github.io/jetpackpaging%E5%88%86%E9%A1%B5%E5%BA%93%E4%B8%8E%E7%BD%91%E7%BB%9C%E5%8A%A0%E8%BD%BD/</link>
    <pubDate>Mon, 10 Aug 2020 16:37:41 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://nevillenoah.github.io/jetpackpaging%E5%88%86%E9%A1%B5%E5%BA%93%E4%B8%8E%E7%BD%91%E7%BB%9C%E5%8A%A0%E8%BD%BD/</guid>
    <description><![CDATA[引言 Paging3的模型改了，主要特点是新增了中转器以实现网络数据的持久化存储。 Paging3模型 Paing数据加载的途径一：如果你希望数据]]></description>
</item><item>
    <title>Jetpack：Paging分页库之使用基础</title>
    <link>https://nevillenoah.github.io/jetpackpaging%E5%88%86%E9%A1%B5%E5%BA%93%E4%B9%8B%E4%BD%BF%E7%94%A8%E5%9F%BA%E7%A1%80/</link>
    <pubDate>Wed, 05 Aug 2020 21:46:41 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://nevillenoah.github.io/jetpackpaging%E5%88%86%E9%A1%B5%E5%BA%93%E4%B9%8B%E4%BD%BF%E7%94%A8%E5%9F%BA%E7%A1%80/</guid>
    <description><![CDATA[引言 也许你还在RecyclerView的下拉加载而烦恼，也许你还在为做分页缓存而头疼，所以，他来了——Paging分页库。 我将代码存到了gi]]></description>
</item><item>
    <title>Gradle：仓库</title>
    <link>https://nevillenoah.github.io/gradle%E4%BB%93%E5%BA%93/</link>
    <pubDate>Tue, 04 Aug 2020 16:33:58 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://nevillenoah.github.io/gradle%E4%BB%93%E5%BA%93/</guid>
    <description><![CDATA[引言 你有没有很奇怪，我们的远程引入的依赖库为什么只需要写入源即可？难道还有不需要网络协议就能获取到的资源？怎么可能。那么协议写到了哪里？写到]]></description>
</item><item>
    <title>Gradle：依赖库</title>
    <link>https://nevillenoah.github.io/gradle%E4%BE%9D%E8%B5%96%E5%BA%93/</link>
    <pubDate>Tue, 04 Aug 2020 15:05:58 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://nevillenoah.github.io/gradle%E4%BE%9D%E8%B5%96%E5%BA%93/</guid>
    <description><![CDATA[引言 很多同学写了Android很久，对于依赖库的引入却是傻傻分不清。因为Gradle随着版本的升级，语义在不断的变化，从compile到im]]></description>
</item></channel>
</rss>
