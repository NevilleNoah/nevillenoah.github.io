<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Neville Noah | Blog</title>
        <link>https://nevillenoah.github.io/</link>
        <description>关于 LoveIt 主题</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 07 Nov 2020 10:30:58 &#43;0800</lastBuildDate>
            <atom:link href="https://nevillenoah.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>MacOS下jenv管理多版本JDK</title>
    <link>https://nevillenoah.github.io/macos%E4%B8%8Bjenv%E7%AE%A1%E7%90%86%E5%A4%9A%E7%89%88%E6%9C%ACjdk/</link>
    <pubDate>Sat, 07 Nov 2020 10:30:58 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://nevillenoah.github.io/macos%E4%B8%8Bjenv%E7%AE%A1%E7%90%86%E5%A4%9A%E7%89%88%E6%9C%ACjdk/</guid>
    <description><![CDATA[操作指南 官方操作指南：https://www.jenv.be/ 安装jenv 使用brew安装jenv 1 $ brew install jenv 配置变量 配置命令行变量，我使用的]]></description>
</item><item>
    <title>MacOS下编译JDK12</title>
    <link>https://nevillenoah.github.io/macos%E4%B8%8B%E7%BC%96%E8%AF%91jdk12/</link>
    <pubDate>Thu, 05 Nov 2020 12:30:58 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://nevillenoah.github.io/macos%E4%B8%8B%E7%BC%96%E8%AF%91jdk12/</guid>
    <description><![CDATA[获取源码 直接从OpenJDK的官网获取，我选用的是JDK12 http://hg.openjdk.java.net/jdk/jdk12/ 点击左侧栏的zip就会开始下载 主要环境 MacOS 10.15.5 Xcode 12.1 Clang 12.0.0 Java 11 我是如何知道编译需要这些]]></description>
</item><item>
    <title>Android消息机制（Java层）</title>
    <link>https://nevillenoah.github.io/android%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6java%E5%B1%82/</link>
    <pubDate>Wed, 09 Sep 2020 12:31:58 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://nevillenoah.github.io/android%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6java%E5%B1%82/</guid>
    <description><![CDATA[基础示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // ExampleThread.java public class ExampleThread extends Thread { public Handler mHandler; public void run() { Looper.prepare(); mHandler = new Handler() { public void handleMessage(Message msg) { // TODO：处理消息 switch(msg.what) { case ...: ... case ...:]]></description>
</item><item>
    <title>Android事件分发机制</title>
    <link>https://nevillenoah.github.io/android%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/</link>
    <pubDate>Mon, 07 Sep 2020 12:31:58 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://nevillenoah.github.io/android%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/</guid>
    <description><![CDATA[Activity事件传递 以“按下”事件为例，首先由Activity捕获点击事件，因此查看Activity.class中的dispatchTo]]></description>
</item><item>
    <title>WorkManager之任务关联</title>
    <link>https://nevillenoah.github.io/workmanager%E4%B9%8B%E4%BB%BB%E5%8A%A1%E5%85%B3%E8%81%94/</link>
    <pubDate>Fri, 28 Aug 2020 14:46:41 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://nevillenoah.github.io/workmanager%E4%B9%8B%E4%BB%BB%E5%8A%A1%E5%85%B3%E8%81%94/</guid>
    <description><![CDATA[任务排序 我们使用WorkManager的函数： beginWith() then() 来完成任务排序，例如： 1 2 3 4 5 6 7 8 9 10 WorkManager .getInstance(myContext) // 开始时对数据进行过滤 .beginWith(filter) // 再对数据进行压缩 .then(compress)]]></description>
</item><item>
    <title>WorkManager之任务信息</title>
    <link>https://nevillenoah.github.io/workmanager%E4%B9%8B%E4%BB%BB%E5%8A%A1%E4%BF%A1%E6%81%AF/</link>
    <pubDate>Fri, 28 Aug 2020 11:46:41 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://nevillenoah.github.io/workmanager%E4%B9%8B%E4%BB%BB%E5%8A%A1%E4%BF%A1%E6%81%AF/</guid>
    <description><![CDATA[前言 我们在《WorkManager之任务请求》结尾提到了标签Tag可以用来观察任务，它其实是任务信息WorkInfo的一部分，本章将详细陈述]]></description>
</item><item>
    <title>WorkManager之任务请求</title>
    <link>https://nevillenoah.github.io/workmanager%E4%B9%8B%E4%BB%BB%E5%8A%A1%E8%AF%B7%E6%B1%82/</link>
    <pubDate>Fri, 28 Aug 2020 09:46:41 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://nevillenoah.github.io/workmanager%E4%B9%8B%E4%BB%BB%E5%8A%A1%E8%AF%B7%E6%B1%82/</guid>
    <description><![CDATA[前言 继上一章《WorkMananger之添加任务》之后，我们再来详细学习任务请求WorkRequest。 构造器 WorkRequest有两种构]]></description>
</item><item>
    <title>WorkManager之添加任务</title>
    <link>https://nevillenoah.github.io/workmanager%E4%B9%8B%E6%B7%BB%E5%8A%A0%E4%BB%BB%E5%8A%A1/</link>
    <pubDate>Thu, 27 Aug 2020 21:46:41 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://nevillenoah.github.io/workmanager%E4%B9%8B%E6%B7%BB%E5%8A%A0%E4%BB%BB%E5%8A%A1/</guid>
    <description><![CDATA[[TOC] 前言 Jetpack中的WorkManager用于管理后台运行的任务，可替代原先由Service执行的后台任务。 使用 Gradle gradle引入 1 implementation &#34;androidx.work:work-runtime-ktx:$work_version&#34;]]></description>
</item><item>
    <title>行为型：访问者模式</title>
    <link>https://nevillenoah.github.io/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Sat, 15 Aug 2020 21:17:58 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://nevillenoah.github.io/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[释义 访问者模式，访问者可以改变访问目标类执行的算法。 访问者模式6e9e8a3abf669f2880278ac762e554b2 " 访问者模式 访]]></description>
</item><item>
    <title>行为型：模板模式</title>
    <link>https://nevillenoah.github.io/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Sat, 15 Aug 2020 19:17:58 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://nevillenoah.github.io/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[释义 模板模式，模板为抽象类，子类继承模板，但是调用的时候调用的是模版的方法。 模板模式2feaf82eae3f221420c979fc54df]]></description>
</item></channel>
</rss>
