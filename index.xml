<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Neville Noah | Blog</title>
        <link>https://nevillenoah.github.io/</link>
        <description>关于 LoveIt 主题</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 28 Aug 2020 14:46:41 &#43;0800</lastBuildDate>
            <atom:link href="https://nevillenoah.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>WorkManager之任务关联</title>
    <link>https://nevillenoah.github.io/workmanager%E4%B9%8B%E4%BB%BB%E5%8A%A1%E5%85%B3%E8%81%94/</link>
    <pubDate>Fri, 28 Aug 2020 14:46:41 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://nevillenoah.github.io/workmanager%E4%B9%8B%E4%BB%BB%E5%8A%A1%E5%85%B3%E8%81%94/</guid>
    <description><![CDATA[任务排序 我们使用WorkManager的函数： beginWith() then() 来完成任务排序，例如： 1 2 3 4 5 6 7 8 9 10 WorkManager .getInstance(myContext) // 开始时对数据进行过滤 .beginWith(filter) // 再对数据进行压缩 .then(compress)]]></description>
</item><item>
    <title>WorkManager之任务信息</title>
    <link>https://nevillenoah.github.io/workmanager%E4%B9%8B%E4%BB%BB%E5%8A%A1%E4%BF%A1%E6%81%AF/</link>
    <pubDate>Fri, 28 Aug 2020 11:46:41 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://nevillenoah.github.io/workmanager%E4%B9%8B%E4%BB%BB%E5%8A%A1%E4%BF%A1%E6%81%AF/</guid>
    <description><![CDATA[前言 我们在《WorkManager之任务请求》结尾提到了标签Tag可以用来观察任务，它其实是任务信息WorkInfo的一部分，本章将详细陈述]]></description>
</item><item>
    <title>WorkManager之任务请求</title>
    <link>https://nevillenoah.github.io/workmanager%E4%B9%8B%E4%BB%BB%E5%8A%A1%E8%AF%B7%E6%B1%82/</link>
    <pubDate>Fri, 28 Aug 2020 09:46:41 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://nevillenoah.github.io/workmanager%E4%B9%8B%E4%BB%BB%E5%8A%A1%E8%AF%B7%E6%B1%82/</guid>
    <description><![CDATA[前言 继上一章《WorkMananger之添加任务》之后，我们再来详细学习任务请求WorkRequest。 构造器 WorkRequest有两种构]]></description>
</item><item>
    <title>WorkManager之添加任务</title>
    <link>https://nevillenoah.github.io/workmanager%E4%B9%8B%E6%B7%BB%E5%8A%A0%E4%BB%BB%E5%8A%A1/</link>
    <pubDate>Thu, 27 Aug 2020 21:46:41 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://nevillenoah.github.io/workmanager%E4%B9%8B%E6%B7%BB%E5%8A%A0%E4%BB%BB%E5%8A%A1/</guid>
    <description><![CDATA[[TOC] 前言 Jetpack中的WorkManager用于管理后台运行的任务，可替代原先由Service执行的后台任务。 使用 Gradle gradle引入 1 implementation &#34;androidx.work:work-runtime-ktx:$work_version&#34;]]></description>
</item><item>
    <title>行为型：访问者模式</title>
    <link>https://nevillenoah.github.io/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Sat, 15 Aug 2020 21:17:58 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://nevillenoah.github.io/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[释义 访问者模式，访问者可以改变访问目标类执行的算法。 访问者模式6e9e8a3abf669f2880278ac762e554b2 " 访问者模式 访]]></description>
</item><item>
    <title>行为型：模板模式</title>
    <link>https://nevillenoah.github.io/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Sat, 15 Aug 2020 19:17:58 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://nevillenoah.github.io/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[释义 模板模式，模板为抽象类，子类继承模板，但是调用的时候调用的是模版的方法。 模板模式2feaf82eae3f221420c979fc54df]]></description>
</item><item>
    <title>行为型：策略模式</title>
    <link>https://nevillenoah.github.io/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Sat, 15 Aug 2020 18:17:58 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://nevillenoah.github.io/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[释义 策略模式，制定多种策略，主体对象根据需要使用不同的策略。 策略模式4b054073d842cbcaa716881d8dfbd732 " 策略模]]></description>
</item><item>
    <title>行为型：空对象模式</title>
    <link>https://nevillenoah.github.io/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E7%A9%BA%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Sat, 15 Aug 2020 17:17:58 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://nevillenoah.github.io/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E7%A9%BA%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[释义 空对象模式，用返回“空对象”而不是“判空”来应对“空”的情况。 空对象模式8c0402ce528d83f07ece90a9f83bcaad]]></description>
</item><item>
    <title>行为型：状态模式</title>
    <link>https://nevillenoah.github.io/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Sat, 15 Aug 2020 11:17:58 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://nevillenoah.github.io/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[释义 状态模式，多个状态类，将状态类传入主体类，主体类会随着状态类不同而做不同的操作。 状态模式7a40cc3bb31985e4fb6b3ef5]]></description>
</item><item>
    <title>行为型：观察者模式</title>
    <link>https://nevillenoah.github.io/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Sat, 15 Aug 2020 10:17:58 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://nevillenoah.github.io/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[释义 观察者模式，观察者随着被观察者的变动而变动。 观察者模式a4f9fe7da950a960a35a0789754562b5 " 观察者模式 主体类]]></description>
</item></channel>
</rss>
